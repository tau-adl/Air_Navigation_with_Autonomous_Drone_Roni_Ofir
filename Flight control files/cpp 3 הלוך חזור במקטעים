#include "drone_control_fb_slam/drone_bebop_control.h"


namespace drone_bebop_control
{

droneBebopControl::droneBebopControl(
    const ros::NodeHandle& nh,
    const ros::NodeHandle& nh_private)
  :   nh_(nh),
      nh_private_(nh_private),
      name_(nh_private.getNamespace())
{
  //ROS_INFO("[%s]: Initializing droneBebopControl Node", name_.c_str());
  ROS_INFO("Initializing droneBebopControl Node");
  loadParameters();
  pose_camera_sub_ = nh_.subscribe("rs_frame", 1, &droneBebopControl::poseCameraCallback, this);
  state_change_sub_ = nh_.subscribe("state_change", 1, &droneBebopControl::stateChangeCallback, this);
  path_change_sub_ = nh_.subscribe("path_change", 1, &droneBebopControl::pathChangeCallback, this);


  desired_velocity_pub_ = nh_.advertise < geometry_msgs::Twist > ("velocity", 1);
  land_pub_ = nh_.advertise < std_msgs::Empty > ("/bebop/land", 1);
  take_off_pub_ = nh_.advertise < std_msgs::Empty > ("/bebop/takeoff", 1);

  //steering_angle_ = 0.0;
  //probability_of_collision_ = 0.0;

  // Aggressive initialization
  desired_forward_velocity_ = 0.0;
  desired_side_velocity_ = 0.0;

  use_slam_ = false;
  fly_path_ = false;
  fly_path_state_ = 1.0; // Initial position
  count = 0;
  round = 0;
  pos_command_x = 0.0;
  pos_command_y = 0.0;
  prev_err_x_ = 0.0;
  prev_err_y_ = 0.0;
  f_D_err_x_ = 0.0;
  f_D_err_y_ = 0.0;

  no_slam_alert_ = 1;
  no_slam_counter_ = 0;

}


void droneBebopControl::run()
{

  ros::Duration(2.0).sleep();

  ros::Rate rate(30.0);


  while (ros::ok())
  {

    // Desired body frame velocity to world frame
    //double desired_forward_velocity_m = (1.0 -  probability_of_collision_) * max_forward_index_;
    //if (desired_forward_velocity_m <= 0.0)
    //{
      //ROS_INFO("Detected negative forward velocity! Drone will now stop!");
      //desired_forward_velocity_m  = 0;
    //}
    double Kp_pos_x = 0.1;
    double Kd_pos_x = 0.5;
    double Kp_pos_y = 0.1;
    double Kd_pos_y = 0.5;
    double Ki_pos_y = 0.000;

    double D_err_x, err_x;
    double D_err_y, err_y;


    // filtered P+D navigation:  //scale_true_
    err_x = (pos_command_x - (position_x - position_x_0)*1);
    D_err_x = err_x - prev_err_x_;
    f_D_err_x_ = 0.5648*f_D_err_x_ + 12.75*D_err_x;
    cmd_velocity_.linear.x = Kp_pos_x*err_x + Kd_pos_x*f_D_err_x_;
    ROS_INFO("ErrX: %.3f - F_DErrX: %.3f ",err_x, f_D_err_x_);


    if (cmd_velocity_.linear.x >= 0.9)
      cmd_velocity_.linear.x = 0.9;
    if (cmd_velocity_.linear.x<= -0.9)
      cmd_velocity_.linear.x = -0.9;

    err_y = (pos_command_y - (position_y - position_y_0)*1);
    D_err_y = err_y - prev_err_y_;
    f_D_err_y_ = 0.5648*f_D_err_y_ + 12.75*D_err_y;

    cmd_velocity_.linear.y = Kp_pos_y*err_y + Kd_pos_y*f_D_err_y_ ;

    if (cmd_velocity_.linear.y >= 0.9)
      cmd_velocity_.linear.y = 0.9;
    if (cmd_velocity_.linear.y <= -0.9)
      cmd_velocity_.linear.y = -0.9;

    prev_err_x_ = err_x;
    prev_err_y_ = err_y;


    // Verify that slam is still working..
    no_slam_counter_ = (no_slam_counter_ > 10) ? no_slam_counter_ : no_slam_counter_+1;
    if (no_slam_counter_ > 10)
    {
        ROS_INFO("lost SLAM tracking, holding place.");
        no_slam_alert_ = 1;
    }

    // Publish desired state if slam is still running
    if (use_slam_ && !no_slam_alert_) //After we start and no_slam_counter_<10 (we didnt lost it).
    {
        //cmd_velocity_.angular.z = 0.1;
        desired_velocity_pub_.publish(cmd_velocity_);
        ROS_INFO("PUBLISHING VELOCITY");
//      ROS_INFO("VEl: %.3f",cmd_velocity_);

    }
    else if (use_slam_ && no_slam_alert_) //After we start and no_slam_counter_>10 (we didnt lost it).
    {
        cmd_velocity_.linear.x = 0.0;
        cmd_velocity_.linear.y = 0.0;
        cmd_velocity_.linear.z = 0.0;
        cmd_velocity_.angular.z = 0.0;
        desired_velocity_pub_.publish(cmd_velocity_);
        ROS_INFO("publishing verlocity with problem");
    }
    else //At starting ()
    {
        cmd_velocity_.linear.x = 0.0;    //desired_forward_velocity_;
        cmd_velocity_.linear.y = 0.0;
        cmd_velocity_.linear.z = 0.0;
        cmd_velocity_.angular.z = 0.0;
        desired_velocity_pub_.publish(cmd_velocity_);
        ROS_INFO("NOT PUBLISHING VELOCITY");
        position_x_0 = position_x;


        position_y_0 = position_y;
    }

    //ROS_INFO("POSX: %.3f - POSY: %.3f - POSZ: %5.3f",
             //position_x - position_x_0, position_y - position_y_0, position_z);

    ROS_INFO("POSX: %.3f - POSY: %.3f - POSZ: %5.3f",err_x, err_y, position_z);

    if ((fly_path_) && (round<2))
    {
        bool is_inplace = false;
        //ROS_INFO("test1");
        switch (fly_path_state_)
        {
        //forward
           case 1:
              if (pos_command_x <= (2.0-0.01))
                {
                        pos_command_x+=0.01;
                }
                //pos_command_x = 1.0;
              pos_command_y = 0.0; //0.5


              if ((pos_command_x >= 1.99) && ((err_y <= 0.15) && (err_y >= -0.15)) && ((err_x <= 0.15) && (err_x >= -0.15)))
              {
                 is_inplace = true;
                 count = count + 1;
                 if (count > 100)
                 {
                   ROS_INFO("DONE 10 seconds of mode LEFT BACK.");
                  // fly_path_state_ = 2;
                        fly_path_state_=2;
                   count = 0;
                 }
              }
              break;

           case 2: // backword
//              pos_command_x =  0.0;
                if (pos_command_x >= 0+ 0.01)
                        pos_command_x-=0.01;
//because of 0.15
              pos_command_y = 0.0; //0.5

              if ((pos_command_x <= 0.01) && ((err_y <= 0.15) && (err_y >= -0.15)) && ((err_x <= 0.15) && (err_x >= -0.15)))
              {
                 is_inplace = true;
                 count = count + 1;  
                 if (count > 100)
                 {
                   ROS_INFO("DONE 10 seconds of mode LEFT FRONT.");
                   fly_path_state_ = 1;
                   count = 0;
                 }

              }
              break;

           case 3:  // right front
              pos_command_x = 1.0;
              pos_command_y = 0.0;

              if (((err_y <= 0.15) && (err_y >= -0.15)) && ((err_x <= 0.15) && (err_x >= -0.15)))
              {
                 is_inplace = true;
                 count = count + 1;  
                 if (count > 100)
                 {
                   ROS_INFO("DONE 10 seconds of mode RIGHT FRONT.");
                   fly_path_state_ = 4;
                   count = 0;
                 }
              }
              ROS_INFO("mode RIGHT FRONT : %s", is_inplace ? "IN PLACE" : "ON THE WAY");
              break;

           case 4:  //  right back
              pos_command_x = 0.0;
              pos_command_y = 0.0;

              if (((err_y <= 0.15) && (err_y >= -0.15)) && ((err_x <= 0.15) && (err_x >= -0.15)))
              {
                 is_inplace = true;
                 count = count + 1;
                 if (count > 100)
                 {
                   ROS_INFO("DONE 10 seconds of mode RIGHT BACK.");
                   fly_path_state_ = 1;
                   count = 0;
                   //round++;
                 }
              }
              ROS_INFO("mode RIGHT BACK : %s", is_inplace ? "IN PLACE" : "ON THE WAY");
              break;
        }
    }

    if (round==0)
    {
        std_msgs::Empty takeoff_empty;
        take_off_pub_.publish(takeoff_empty);
        round = round + 1;
    }



    if (round==2)
    {
      std_msgs::Empty land_empty;
      use_slam_ = 0;
      land_pub_.publish(land_empty);
    }


    rate.sleep();

    ros::spinOnce();

  }

}

void droneBebopControl::poseCameraCallback(const geometry_msgs::PoseStamped::ConstPtr& msg)
{

  //probability_of_collision_ = msg->collision_prob;
  //steering_angle_ = msg->steering_angle;

  position_x = msg->pose.position.x;
  position_y = msg->pose.position.y;
  position_z = msg->pose.position.z;
  //position_z = msg.pose.pose.position.z;

  no_slam_counter_ = 0;
  no_slam_alert_ = 0;

}

void droneBebopControl::stateChangeCallback(const std_msgs::Bool& msg)
{
    //change current state
    use_slam_ = msg.data;
    ROS_INFO("change state");
    ROS_INFO("VEl: %.3f",cmd_velocity_);
    prev_err_x_ = 0;
    prev_err_y_ = 0;
    f_D_err_x_ = 0;
    f_D_err_y_ = 0;

}


void droneBebopControl::pathChangeCallback(const std_msgs::Bool& msg)
{
    //change current state
    fly_path_ = msg.data;
    ROS_INFO("fly path");
}

void droneBebopControl::loadParameters()
{

  ROS_INFO("Reading parameters");
  //ROS_INFO("[%s]: Reading parameters", name_.c_str());
  //nh_private_.param<double>("alpha_velocity", alpha_velocity_, 0.3);
  //nh_private_.param<double>("scale_true", scale_true_, 1.0);
  //nh_private_.param<double>("max_forward_index", max_forward_index_, 0.2);
  //nh_private_.param<double>("critical_prob", critical_prob_coll_, 0.7);

}

} // namespace drone_bebop_control

int main(int argc, char** argv)
{
  ros::init(argc, argv, "drone_bebop_control_");
  drone_bebop_control::droneBebopControl dn;

  dn.run();

  return 0;
}


